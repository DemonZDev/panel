<%- include('components/template') %>
<body class="bg-[#010103] text-gray-300" style="font-family: 'Inter'" x-data="{ sidebarOpen: false }" @keydown.escape="sidebarOpen = false"></body>
<main class="flex-grow container mx-auto px-4 py-8">
  <div class="flex justify-between items-center w-full mx-auto pb-4">
      <!-- Welcome text and subtext -->
      <div class="flex flex-col">
          <h1 class="text-xl font-semibold mb-0.5 heavy">Instances</h1>
          <p class="text-gray-400 text-md">Overview of your servers on <%= name %>.</p>
      </div>

      <!-- Actions -->
      <div class="flex items-center gap-3">
          <!-- New Server Button -->
          <% if (req.user.admin === true) { %>
<div class="relative inline-block" x-data="{ open: false }">
<button 
  @click="open = !open"
  class="hover:scale-95 flex items-center justify-center h-11 gap-2 px-5 text-sm font-medium text-white transition-all duration-200 rounded-full shadow bg-indigo-500 hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-800 focus:ring-offset-2 ring-offset-gray-200 hover:shadow-none"
>
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="size-4">
    <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
  </svg>
  <span><%= req.translations.viewInstances %></span>
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    viewBox="0 0 24 24" 
    fill="none" 
    stroke="currentColor" 
    class="size-4 transition-transform duration-200"
    :class="open ? 'rotate-180' : ''"
  >
    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
  </svg>
</button>

<div 
  x-show="open"
  x-transition:enter="transition ease-out duration-200"
  x-transition:enter-start="opacity-0 scale-95 -translate-y-2"
  x-transition:enter-end="opacity-100 scale-100 translate-y-0"
  x-transition:leave="transition ease-in duration-200"
  x-transition:leave-start="opacity-100 scale-100 translate-y-0"
  x-transition:leave-end="opacity-0 scale-95 -translate-y-2"
  @click.outside="open = false"
  class="absolute right-0 mt-2 w-48 rounded-xl bg-white/5 backdrop-blur-xl border border-white/10 shadow-lg"
  style="display: none;"
>
<div class="py-2">
<% if (req.query.see == 'other') { %>
    <a href="/instances" class="flex items-center gap-2 px-4 py-2.5 text-sm text-white/90 hover:bg-white/10 transition-colors">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" class="size-4">
<path stroke-linecap="round" stroke-linejoin="round" d="M21.75 17.25v-.228a4.5 4.5 0 0 0-.12-1.03l-2.268-9.64a3.375 3.375 0 0 0-3.285-2.602H7.923a3.375 3.375 0 0 0-3.285 2.602l-2.268 9.64a4.5 4.5 0 0 0-.12 1.03v.228m19.5 0a3 3 0 0 1-3 3H5.25a3 3 0 0 1-3-3m19.5 0a3 3 0 0 0-3-3H5.25a3 3 0 0 0-3 3m16.5 0h.008v.008h-.008v-.008Zm-3 0h.008v.008h-.008v-.008Z" />
</svg>
<%= req.translations.showingYourInstances %>
    </a>
    <% } else { %>
    <a href="/instances?see=other" class="flex items-center gap-2 px-4 py-2.5 text-sm text-white/90 hover:bg-white/10 transition-colors">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" class="size-4">
<path stroke-linecap="round" stroke-linejoin="round" d="M21.75 17.25v-.228a4.5 4.5 0 0 0-.12-1.03l-2.268-9.64a3.375 3.375 0 0 0-3.285-2.602H7.923a3.375 3.375 0 0 0-3.285 2.602l-2.268 9.64a4.5 4.5 0 0 0-.12 1.03v.228m19.5 0a3 3 0 0 1-3 3H5.25a3 3 0 0 1-3-3m19.5 0a3 3 0 0 0-3-3H5.25a3 3 0 0 0-3 3m16.5 0h.008v.008h-.008v-.008Zm-3 0h.008v.008h-.008v-.008Z" />
</svg>
  <%= req.translations.seeAllInstances %>
    </a>
  </div>
  <% } %>
</div>
<% } %>
</div>
</div>      
<
    <% instances.forEach(function (instance) { %>
<div class="server-row mb-4 bg-white/5 rounded-2xl hover:bg-white/10 border-2 border-dashed border-transparent hover:border-white/5 transition px-6 py-4 grid grid-cols-12 gap-4 items-center cursor-pointer"
  id="instancesContainer" 
  data-instance-id="<%= instance.Id %>"
   onclick="window.location.href='../instance/<%= instance.Id %>' + ((5 === 18 || 5 === 19 || 5 === 18) ? 'vm' : (7 === 42 || 7 === 51 ? 'rdp' : 'server'))">
                  
                  <!-- Server Name & Node -->
                  <div class="col-span-2">
                      <div class="font-medium text-white"><%= instance.Name %></div>
                  </div>

                  <!-- Status -->

                 

                  <!-- Memory Usage -->
                  <div class="col-span-2">
                      <div class="flex  items-center gap-2">
                          <div class="w-full bg-white/10 rounded-full h-1.5">
                              <div data-ram-usage class="bg-indigo-500 h-1.5 rounded-full transition-all" style="width: 0%"></div>
                          </div>
                          <span data-status class="text-xs memory-text">  <%= req.translations.loading %></span>
                      </div>
                  </div>

                  <!-- CPU Usage -->
                  <div class="col-span-2">
                      <div class="flex  items-center gap-2">
                          <div class="w-full bg-white/10 rounded-full h-1.5">
                              <div data-ram-usage class="cpu-bar bg-indigo-500 h-1.5 rounded-full transition-all" style="width: 0%"></div>
                          </div>
                          <span data-status class="text-xs cpu-text"><%= req.translations.loading %></span>
                      </div>
                  </div>

                  <!-- Server Details -->
                  <div class="col-span-3 ml-4">
                      <div data-status-bg class="text-xs  font-mono text-white/70 bg-white/5 border border-white/5 px-3 py-1.5 rounded-lg shadow-sm">
                          <span data-status ><%= req.translations.loading %></span>
                      </div>
                  </div>
              </div>
              <% }); %>
</main>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const instances = document.querySelectorAll('[data-instance-id]');
  
      instances.forEach(instance => {
        const containerId = instance.dataset.instanceId;
        const isSecure = window.location.protocol === 'https:';
        const wsProtocol = isSecure ? 'wss' : 'ws';
        const wsPort = isSecure ? '' : `:<%= config.port %>`;
        const socket = new WebSocket(`${wsProtocol}://<%= config.domain %>${wsPort}/stats/${containerId}`);
  
        const statusElement = instance.querySelector('[data-status]');
        const statusBg = instance.querySelector('[data-status-bg]');
        const ramUsageElement = instance.querySelector('[data-ram-usage]');
        const ramLimitElement = instance.querySelector('[data-ram-limit]');
        const cpuUsageElement = instance.querySelector('[data-cpu-usage]');
  
        function formatBytes(bytes, decimals = 2) {
          if (bytes === 0) return '0.00 B';
          const k = 1024;
          const dm = decimals < 0 ? 0 : decimals;
          const sizes = ['B', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
          const i = Math.floor(Math.log(bytes) / Math.log(k));
          return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }
  
        socket.onmessage = event => {
  
          let stats;
  
          try {
            stats = JSON.parse(event.data);
          } catch (e) {
            console.error('Error parsing JSON:', e);
            console.log('Raw data:', event.data);
            return;
          }
  
          if (stats.error) {
            console.error('Error fetching stats:', stats.error);
            return;
          }
  
          // Update RAM usage
          const ramUsageRaw = stats.memory_stats.usage / 1024;
          const ramUsage = isNaN(ramUsageRaw) ? '0 B' : formatBytes(ramUsageRaw);
          const ramLimitRaw = stats.memory_stats.limit / 1024;
          const ramLimit = isNaN(ramLimitRaw) ? '0 B' : formatBytes(ramLimitRaw);
          ramUsageElement.textContent = ramUsage + ' <%= req.translations.ramUsage %>';
  
          // Determine status based on RAM usage
          if (isNaN(ramUsageRaw)) {
            statusElement.className = 'text-neutral-500';
            statusElement.textContent = 'Offline';
          } else if (ramUsageRaw > 1) {
            statusBg.classList.remove('bg-neutral-600/20');
            statusBg.classList.add('bg-emerald-600/10');
            statusElement.className = 'text-emerald-500';
            statusElement.textContent = 'Online';
          }
  
          // Update CPU usage
          const cpuDelta = stats.cpu_stats.cpu_usage.total_usage - stats.precpu_stats.cpu_usage.total_usage;
          const systemCpuDelta = stats.cpu_stats.system_cpu_usage - stats.precpu_stats.system_cpu_usage;
          const cpuUsagePercent = (cpuDelta && systemCpuDelta && !isNaN(cpuDelta) && !isNaN(systemCpuDelta))
            ? ((cpuDelta / systemCpuDelta) * 100).toFixed(2) + '%'
            : '0%';
          cpuUsageElement.textContent = cpuUsagePercent + ' <%= req.translations.cpuUsage %>';
        };
      });
    });
  </script>